{
	"info": {
		"_postman_id": "b5f335ef-85eb-4679-9873-55c5b13bfc7c",
		"name": "Pet Store",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "PetScenarios",
			"item": [
				{
					"name": "Add a new pet to the store",
					"item": [
						{
							"name": "Positive Scenarios",
							"item": [
								{
									"name": "1. Valid Input",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status is available\", function () {",
													"    var jsonData = pm.response.json();",
													"    //console.log(jsonData.id, jsonData.status)",
													"    pm.expect(jsonData.status).to.eql(\"available\");",
													"});",
													"",
													"pm.test(\"Verify the response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"Pet1Name\", jsonData.name );",
													"    pm.expect(jsonData.name).to.eql(\"timtam\");",
													"    pm.expect(jsonData.id).to.not.eql(null);",
													"    pm.collectionVariables.set(\"Pet1Id\", jsonData.id );",
													"    pm.expect(jsonData.category.id).to.eql(11);",
													"    pm.expect(jsonData.category.name).to.eql(\"Fish\");",
													"    pm.expect(jsonData.tags).to.not.eql([]);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2b8e27c9-9dec-4322-8ec1-d808d502999d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"timtam\",\n  \"photoUrls\": [],\n  \"category\": {\n    \"id\": \"011\",\n    \"name\": \"Fish\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"100\",\n      \"name\": \"Freshwater\"\n    }\n\n  ],\n  \"status\": \"available\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								},
								{
									"name": "3. Optional fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status is sold\", function () {",
													"    var jsonData = pm.response.json();",
													"    //console.log(jsonData.id, jsonData.status)",
													"    pm.expect(jsonData.status).to.eql(\"sold\");",
													"});",
													"",
													"pm.test(\"Verify the response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"Pet3Name\", jsonData.name );",
													"    pm.expect(jsonData.name).to.eql(\"husky husky :)\");",
													"    pm.expect(jsonData.id).to.not.eql(null);",
													"    pm.collectionVariables.set(\"Pet3Id\", jsonData.id );",
													"    pm.expect(jsonData.category.id).to.eql(10);",
													"    pm.expect(jsonData.category.name).to.eql(\"Dogs\");",
													"    pm.expect(jsonData.photoUrls).to.not.eql([]);",
													"    pm.expect(jsonData.tags).to.not.eql([]);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d2f3a8bb-b6e2-401f-9db0-a4c5cd6788bc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"husky husky :)\",\n  \"photoUrls\": [\n    \"https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.thedrakecenter.com%2Fservices%2Fdogs%2Fbreeds%2Fsiberian-husky&psig=AOvVaw3P_M_6Jp_vPZeJgQaJh36h&ust=1727587113846000&source=images&cd=vfe&opi=89978449&ved=2ahUKEwiZzJfT8eSIAxWGcWwGHeiUOsEQjRx6BAgAEBg\",\n    \"https://www.google.com/url?sa=i&url=https%3A%2F%2Fdogtime.com%2Fdog-breeds%2Fsiberian-husky&psig=AOvVaw1no6LFN2rV7q6jGZPzqYyQ&ust=1727587115898000&source=images&cd=vfe&opi=89978449&ved=2ahUKEwi96JTU8eSIAxURfWwGHfhPJv4QjRx6BAgAEBg\"\n  ],\n  \"category\": {\n    \"id\": \"010\",\n    \"name\": \"Dogs\"\n  },\n  \"tags\": [\n    {\n      \"id\": \"100\",\n      \"name\": \"Siberian Husky\"\n    },\n    {\n      \"id\": \"101\",\n      \"name\": \"high-energy dogs\"\n    },\n    {\n      \"id\": \"102\",\n      \"name\": \"more outdoor time dogs\"\n    }\n\n  ],\n  \"status\": \"sold\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								},
								{
									"name": "2. Required fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status is pending\", function () {",
													"    var jsonData = pm.response.json();",
													"    //console.log(jsonData.id, jsonData.status)",
													"    pm.expect(jsonData.status).to.eql(\"pending\");",
													"});",
													"",
													"pm.test(\"Verify the response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"Pet2Name\", jsonData.name );",
													"    pm.expect(jsonData.name).to.eql(\"Goldie\");",
													"    pm.expect(jsonData.id).to.not.eql(null);",
													"    pm.collectionVariables.set(\"Pet2Id\", jsonData.id );",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6fb86483-fbec-451f-9e79-bcb8046cfa88",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Goldie\",\n  \"status\": \"pending\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								}
							],
							"id": "6429961a-c1f0-439b-b020-7cfe8f2a7454"
						},
						{
							"name": "Negative Scenarios",
							"item": [
								{
									"name": "1. Without required fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});",
													"",
													"pm.test(\"Error message mentions missing fields\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(pm.response.text()).to.include(\"Invalid Input\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d61fd5a8-e9f9-488c-859e-7e6b863c1050",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"category\": {\n    \"id\": \"010\",\n    \"name\": \"Dogs\"\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								},
								{
									"name": "3.Empty Json Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});",
													"",
													"pm.test(\"Error message mentions missing fields\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(pm.response.text()).to.include(\"Invalid Input\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1483d463-b72c-47fb-b68a-1bf04287d8d5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								},
								{
									"name": "2. Incorrect Status Enum",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});",
													"",
													"pm.test(\"Error message mentions missing fields\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(pm.response.text()).to.include(\"Invalid Input\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e3146283-091c-490f-ba42-77bfb228a698",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"someName\",\n  \"status\": \"someStatus\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								},
								{
									"name": "4. Invalid datatypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});",
													"",
													"pm.test(\"Error message mentions missing fields\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(pm.response.text()).to.include(\"Invalid Input\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "83cc4ac6-6599-4c61-96c5-9a0d0d850ce1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"invalidID\",\n  \"name\": 23,\n  \"status\": 123\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								},
								{
									"name": "5. Add pet with existing ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});",
													"",
													"pm.test(\"Error message mentions missing fields\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(pm.response.text()).to.include(\"Invalid Input\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b92fd289-561d-47fb-8ba2-4d27bfd59f02",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{Pet1Id}}\",\n  \"name\": \"Duke\",\n  \"status\": \"pending\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								}
							],
							"id": "7302d4a3-77db-4f2c-add7-5c68508d6698"
						}
					],
					"id": "d8c62482-e63c-4f5a-ae2d-02321683cc21",
					"description": "This folder contains test scenarios for the endpoint - Add a new pet to the store.\n\n**Positive Scenarios:**\n\n1. Create a pet with valid data (name, category, status, tags, photoUrls).\n    \n2. Create a pet with only the required fields (e.g., name, status).\n    \n3. Create a pet with all optional fields provided.\n    \n\n**Negative Scenarios:**\n\n1. Attempt to create a pet without any required fields.\n    \n2. Create a pet with an invalid status (e.g., a status not in the allowed set \\[“available”, “pending”, “sold”\\]).\n    \n3. Send a request with an empty JSON object.\n    \n4. Attempt to create a pet with invalid data types (e.g., numbers for name, strings for ID).\n    \n5. Attempt to create a pet with an existing pet ID"
				},
				{
					"name": "Update an existing pet in the store",
					"item": [
						{
							"name": "Positive Scenarios",
							"item": [
								{
									"name": "1. Valid Input",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status is available\", function () {",
													"    var jsonData = pm.response.json();",
													"    //console.log(jsonData.id, jsonData.status)",
													"    pm.expect(jsonData.status).to.eql(\"available\");",
													"});",
													"",
													"pm.test(\"Verify the response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"Pet1Name-Modified\", jsonData.name );",
													"    pm.expect(jsonData.name).to.eql(\"timtam - changed\");",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"Pet1Id\"));",
													"    pm.expect(jsonData.category.id).to.eql(11);",
													"    pm.expect(jsonData.category.name).to.eql(\"Fish\");",
													"    pm.expect(jsonData.tags[0].id).to.eql(100);",
													"    pm.expect(jsonData.tags[1].id).to.eql(200);",
													"    pm.expect(jsonData.tags[0].name).to.eql(\"Freshwater\");",
													"    pm.expect(jsonData.tags[1].name).to.eql(\"small size\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ad49e497-1436-419d-b1f7-235700503bb0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{Pet1Id}},\n    \"category\": {\n        \"id\": 11,\n        \"name\": \"Fish\"\n    },\n    \"name\": \"timtam - changed\",\n    \"photoUrls\": [],\n    \"tags\": [\n        {\n            \"id\": 100,\n            \"name\": \"Freshwater\"\n        },\n        {\n            \"id\": 200,\n            \"name\": \"small size\"\n        }\n    ],\n    \"status\": \"available\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								},
								{
									"name": "2. Update status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status is sold\", function () {",
													"    var jsonData = pm.response.json();",
													"    //console.log(jsonData.id, jsonData.status)",
													"    pm.expect(jsonData.status).to.eql(\"sold\");",
													"});",
													"",
													"pm.test(\"Verify the response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"Pet1Name-Modified\", jsonData.name );",
													"    pm.expect(jsonData.name).to.eql(\"timtam - changed\");",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"Pet1Id\"));",
													"    pm.expect(jsonData.category.id).to.eql(11);",
													"    pm.expect(jsonData.category.name).to.eql(\"Fish\");",
													"    pm.expect(jsonData.tags[0].id).to.eql(100);",
													"    pm.expect(jsonData.tags[1].id).to.eql(200);",
													"    pm.expect(jsonData.tags[0].name).to.eql(\"Freshwater\");",
													"    pm.expect(jsonData.tags[1].name).to.eql(\"small size\");",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9725ca24-9e73-4361-90ed-15a165e13462",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{Pet1Id}},\n    \"category\": {\n        \"id\": 11,\n        \"name\": \"Fish\"\n    },\n    \"name\": \"timtam - changed\",\n    \"photoUrls\": [],\n    \"tags\": [\n        {\n            \"id\": 100,\n            \"name\": \"Freshwater\"\n        },\n        {\n            \"id\": 200,\n            \"name\": \"small size\"\n        }\n    ],\n    \"status\": \"sold\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								},
								{
									"name": "4. Optional fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status is sold\", function () {",
													"    var jsonData = pm.response.json();",
													"    //console.log(jsonData.id, jsonData.status)",
													"    pm.expect(jsonData.status).to.eql(\"sold\");",
													"});",
													"",
													"pm.test(\"Verify the response\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.name).to.eql(\"husky husky :)\");",
													"    pm.expect(jsonData.id).to.not.eql(null);",
													"    pm.expect(jsonData.category.id).to.eql(10);",
													"    pm.expect(jsonData.category.name).to.eql(\"Dogs\");",
													"    pm.expect(jsonData.photoUrls).to.not.eql([]);",
													"    pm.expect(jsonData.tags).to.not.eql([]);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a99d5752-4891-4e2f-8ab4-94e37a4fdc71",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{Pet3Id}},\n    \"category\": {\n        \"id\": 10,\n        \"name\": \"Dogs\"\n    },\n    \"name\": \"husky husky :)\",\n    \"photoUrls\": [\n        \"https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.thedrakecenter.com%2Fservices%2Fdogs%2Fbreeds%2Fsiberian-husky&psig=AOvVaw3P_M_6Jp_vPZeJgQaJh36h&ust=1727587113846000&source=images&cd=vfe&opi=89978449&ved=2ahUKEwiZzJfT8eSIAxWGcWwGHeiUOsEQjRx6BAgAEBg\"\n            ],\n    \"tags\": [\n        {\n            \"id\": 100,\n            \"name\": \"Siberian Husky\"\n        },\n        {\n            \"id\": 101,\n            \"name\": \"high-energy dogs\"\n        },\n        {\n            \"id\": 102,\n            \"name\": \"more outdoor time dogs\"\n        },\n        {\n            \"id\": 103,\n            \"name\": \"friendly\"\n        }\n    ],\n    \"status\": \"sold\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								},
								{
									"name": "3. Required fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Status is available\", function () {",
													"    var jsonData = pm.response.json();",
													"    //console.log(jsonData.id, jsonData.status)",
													"    pm.expect(jsonData.status).to.eql(\"available\");",
													"});",
													"",
													"pm.test(\"Verify the response\", function () {",
													"    var jsonData = pm.response.json();    ",
													"    pm.expect(jsonData.name).to.eql(\"Goldie\");",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"Pet2Id\"));    ",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "df8fbc79-fda2-4b50-9ca7-898bcb32180a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{Pet2Id}},\n    \"name\": \"Goldie\",\n    \"status\": \"available\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								}
							],
							"id": "310240d9-2def-4648-92b0-1a363f87c2d2"
						},
						{
							"name": "Negative Scenarios",
							"item": [
								{
									"name": "1. update non-existent pet",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error message for non-existent pet\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message').that.includes('Pet not found');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6bb75c65-87b2-4a39-b72b-2cab113b376b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 150,\n    \"name\": \"Goldie\",\n    \"status\": \"available\",\n    \"category\": {\n    \"id\": \"010\",\n    \"name\": \"Dogs\"\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								},
								{
									"name": "3.Empty Json Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});",
													"",
													"pm.test(\"Error message mentions missing fields\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(pm.response.text()).to.include(\"Validation exception\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "286e2352-19e7-4a76-865c-98da8c8460eb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								},
								{
									"name": "2. Incorrect Status Enum",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});",
													"",
													"pm.test(\"Error message mentions missing fields\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(pm.response.text()).to.include(\"Validation exception\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "28e0205d-d219-42b4-9f78-1ca8cdb47fc2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": {{Pet1Id}},\n    \"name\": \"someName\",\n    \"status\": \"someStatus\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								},
								{
									"name": "4. Invalid datatypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});",
													"",
													"pm.test(\"Error message for invalid data types\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(pm.response.text()).to.include(\"Validation exception\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e85a918f-eb71-4d63-a8fc-240c3d8500a1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"invalid1\",\n  \"name\": 123,\n  \"status\": 777\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								},
								{
									"name": "5. Missing required fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445c8fc9-1300-4b50-a862-426e465eff47",
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});",
													"",
													"pm.test(\"Error message mentions missing fields\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(pm.response.text()).to.include(\"Validation exception\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "87f82f37-c54c-462c-9ce1-ff3e62386ea0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": {
												"scope": "read:pets write:pets",
												"authUrl": "https://petstore.swagger.io/oauth/authorize",
												"grant_type": "implicit"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Duke\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/pet"
									},
									"response": []
								}
							],
							"id": "f102422c-0cbe-4f47-83d2-d200c751b25d"
						}
					],
					"id": "705f403f-dfd0-44e5-b4e5-a5a1cee29a58",
					"description": "This folder contains test scenarios for the endpoint - Update an existing pet.\n\n**Positive Scenarios:**\n\n1. Update an existing pet with valid data (name, category, status, tags, photoUrls).\n    \n2. Update an existing pet | update status\n    \n3. Update an existing pet | minimal required fields\n    \n4. Update an existing pet | optional fields provided.\n    \n\n**Negative Scenarios:**\n\n1. Update an non-existent pet\n    \n2. Update a pet with an invalid status (e.g a status not in the allowed set \\[“available”, “pending”, “sold”\\]).\n    \n3. Update a pet with an empty JSON object.\n    \n4. Update a pet with invalid data types (e.g., numbers for name, strings for ID).\n    \n5. Update a pet | missing required fields"
				},
				{
					"name": "Get pets by status",
					"item": [
						{
							"name": "Positive Scenarios",
							"item": [
								{
									"name": "Staus - Available",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response contains an array of pets\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"pm.test(\"Pets in response have 'available' status\", function () {",
													"    const jsonData = pm.response.json();",
													"    jsonData.forEach(function (pet) {",
													"        pm.expect(pet).to.have.property('status', 'available');",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e70b9164-b1a1-43d1-8aa4-45313affaa81",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/pet/findByStatus?status=available",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "available"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Staus - pending",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response contains an array of pets\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"pm.test(\"Pets in response have 'pending' status\", function () {",
													"    const jsonData = pm.response.json();",
													"    jsonData.forEach(function (pet) {",
													"        pm.expect(pet).to.have.property('status', 'pending');",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2b2aae71-400f-4a54-98a4-dbcb00da0bb5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/pet/findByStatus?status=pending",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "pending"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Status - sold",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response contains an array of pets\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('array');",
													"});",
													"",
													"pm.test(\"Pets in response have 'sold' status\", function () {",
													"    const jsonData = pm.response.json();",
													"    jsonData.forEach(function (pet) {",
													"        pm.expect(pet).to.have.property('status', 'sold');",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bf6ebcad-254b-4008-a140-f37be3bd9ae1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/pet/findByStatus?status=sold",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "sold"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "d0d2935d-8bfb-4fd7-9901-e38762d0fdb9"
						},
						{
							"name": "Negative Scenarios",
							"item": [
								{
									"name": "No Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for missing status parameter\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(pm.response.text()).to.include(\"status\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5a352b46-666e-4b0a-9858-9fbf4d350cb7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/pet/findByStatus"
									},
									"response": []
								},
								{
									"name": "Invalid Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for invalid status value\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message').that.includes('Invalid status value');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "33c1a646-db8d-4bcf-ad73-da663792fc67",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/pet/findByStatus?status=invalid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"findByStatus"
											],
											"query": [
												{
													"key": "status",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "668651aa-b619-414c-bfa0-ec9d5862b6b1"
						}
					],
					"id": "068df17c-3d7b-4673-b4df-9b30c10a20f2",
					"description": "This folder contains test scenarios for the endpoint - Get Pets by status.\n\n**Positive Scenarios:**\n\n1. Get pets with \"available\" status\n    \n2. Get pets with \"pending\" status\n    \n3. Get pets with \"sold\" status\n    \n\n**Negative Scenarios:**\n\n1. Get pets with no status parameter\n    \n2. Get pets with \"invalid\" status"
				},
				{
					"name": "Pet | Upload Image",
					"item": [
						{
							"name": "Positive Scenarios",
							"item": [
								{
									"name": "Successful upload",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54e84e4f-5add-4d80-9f17-73ed0e33dcd2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response contains upload confirmation\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message').that.includes('uploaded');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6c8bd31d-4cc7-455b-941b-a96bf5d9a1bf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "additionalMetadata",
													"value": "Fish",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
													"filesNotInWorkingDirectory": [
														"/Users/monishasuresh/Documents/code/EmploymentTests/CBA/PetPhotos/bluefish1.jpeg"
													],
													"src": "postman-cloud:///1ef7d9ed-db47-4270-971e-488b0192c9b6"
												}
											]
										},
										"url": "{{baseUrl}}/pet/{{Pet1Id}}/uploadImage"
									},
									"response": []
								}
							],
							"id": "8e4e5d9c-fd7c-46f7-93b5-83845de52de6"
						},
						{
							"name": "Negative Scenarios",
							"item": [
								{
									"name": "No file selected",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54e84e4f-5add-4d80-9f17-73ed0e33dcd2",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for missing file\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message').that.includes('no file');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a36ddc48-d78a-4ae3-9de6-08a7063ab407",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"value": null
												},
												{
													"key": "additionalMetadata",
													"value": "no file uploaded",
													"type": "text"
												}
											]
										},
										"url": "{{baseUrl}}/pet/{{Pet1Id}}/uploadImage"
									},
									"response": []
								},
								{
									"name": "invalid file type | txt file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54e84e4f-5add-4d80-9f17-73ed0e33dcd2",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);  // Expecting a bad request or unsupported media type",
													"});",
													"",
													"pm.test(\"Error message for invalid file type\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(pm.response.text()).to.include(\"invalid file type\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "711576af-0352-478c-8cb7-6bbc3f95756c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef7e30f-0f59-4110-851b-155f76517bb6"
												},
												{
													"key": "additionalMetadata",
													"value": "txt file",
													"type": "text"
												}
											]
										},
										"url": "{{baseUrl}}/pet/{{Pet1Id}}/uploadImage"
									},
									"response": []
								},
								{
									"name": "No metdata information",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54e84e4f-5add-4d80-9f17-73ed0e33dcd2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response contains upload confirmation\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message').that.includes('uploaded');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3c3b367e-8a40-4bbc-ac39-e3480e7e588e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef7d9ed-db47-4270-971e-488b0192c9b6"
												}
											]
										},
										"url": "{{baseUrl}}/pet/{{Pet1Id}}/uploadImage"
									},
									"response": []
								},
								{
									"name": "pet id incorrect value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54e84e4f-5add-4d80-9f17-73ed0e33dcd2",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response contains NumberFormatException\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message').that.includes('NumberFormatException');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3dbbc82f-5a0b-46da-8b47-723cbe4c4dee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef7d9ed-db47-4270-971e-488b0192c9b6"
												}
											]
										},
										"url": "{{baseUrl}}/pet/abc/uploadImage"
									},
									"response": []
								}
							],
							"id": "e3b2893e-0bd5-452d-acc3-dfcc4766fb0b"
						}
					],
					"id": "21756b83-2348-4785-84db-349076154f3c",
					"description": "This folder contains test scenarios for the endpoint - Upload Image\n\n**Positive Scenarios:**\n\n1. Successful upload\n    \n\n**Negative Scenarios:**\n\n1. No file selected\n    \n2. Invalid file type | txt file\n    \n3. No metadata information provided\n    \n4. Pet Id incorrect value | string datatype used"
				},
				{
					"name": "Find pet by Id",
					"item": [
						{
							"name": "Positive Scenarios",
							"item": [
								{
									"name": "Find by valid Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response contains a pet object\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.have.property('id', 123);",
													"});",
													"",
													"pm.test(\"Pet has valid properties\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('name');",
													"    pm.expect(jsonData).to.have.property('status');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7b256488-38f6-427b-b5a4-b15ede0ca044",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/pet/123"
									},
									"response": []
								}
							],
							"id": "d2664392-f9dd-44b0-94be-6f464fa7655b"
						},
						{
							"name": "Negative Scenarios",
							"item": [
								{
									"name": "Find by non existent Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error message for pet not found\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message').that.includes('Pet not found');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "cb31c3d5-343e-4913-a233-a0c98a082300",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/pet/9223372016900017000"
									},
									"response": []
								},
								{
									"name": "Find by invalid pet id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for invalid input\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message').that.includes('invalid');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e28d0555-ab08-4543-a7f1-243dcf84e183",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/pet/invalid"
									},
									"response": []
								}
							],
							"id": "3cfbe41f-80f1-42e3-927f-3af949dd9f4f"
						}
					],
					"id": "55394d9c-45e5-47b6-8c74-707b4d9e0439",
					"description": "This folder contains test scenarios for the endpoint - Find pet by Id\n\n**Positive Scenarios:**\n\n1. Find by valid Id\n    \n\n**Negative Scenarios:**\n\n1. Find by non existent Id\n    \n2. Find by invalid Pet Id"
				},
				{
					"name": "Update a pet in the store with form data",
					"item": [
						{
							"name": "Positive Scenarios",
							"item": [
								{
									"name": "update with valid Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pet is updated successfully\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message', '123'); // The pet ID",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e09bbc57-2bda-4986-92fd-0945c3512741",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "doggie",
													"type": "text"
												},
												{
													"key": "status",
													"value": "available",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/pet/123",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"123"
											],
											"query": [
												{
													"key": "name",
													"value": "timtam",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "update with valid Id | only name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pet is updated successfully\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message', '123'); // The pet ID",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "416bb623-537f-453c-8e6d-210da54d52e4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "doggie",
													"type": "text"
												},
												{
													"key": "status",
													"value": "available",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/pet/123?name=timtam",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"123"
											],
											"query": [
												{
													"key": "name",
													"value": "timtam"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "update with valid Id | only status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pet is updated successfully\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message', '123'); // The pet ID",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8798a3d3-4763-4431-a884-a8b46ebd8649",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "doggie",
													"type": "text"
												},
												{
													"key": "status",
													"value": "available",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/pet/123",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"123"
											],
											"query": [
												{
													"key": "name",
													"value": "timtam",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "01770b11-a3ca-4b2c-b2ad-ebe967a3ba71"
						},
						{
							"name": "Negative Scenarios",
							"item": [
								{
									"name": "update with non existent Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error message for pet not found\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message').that.includes('not found');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "58d863ef-288c-4c43-b788-02024dccfe89",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "nonexistent",
													"type": "text"
												},
												{
													"key": "status",
													"value": "available",
													"type": "text"
												}
											]
										},
										"url": "{{baseUrl}}/pet/9223372016900017000"
									},
									"response": []
								},
								{
									"name": "update with invalid pet id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 405\", function () {",
													"    pm.response.to.have.status(405);",
													"});",
													"",
													"pm.test(\"Error message for invalid input\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message').that.includes('invalid');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "98cbe4dd-54c4-4ccb-b974-2d34c2f43ff6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "newname",
													"type": "text"
												}
											]
										},
										"url": "{{baseUrl}}/pet/invalid"
									},
									"response": []
								}
							],
							"id": "cc07ddf2-af6a-495e-9afb-c94b86667df5"
						}
					],
					"id": "a985ab97-0703-41b7-8515-d6eeaf05bf41",
					"description": "This folder contains test scenarios for the endpoint - Find pet by Id\n\n**Positive Scenarios:**\n\n1. update with valid Id\n    \n2. update with valid Id | only name\n    \n3. update with valid Id | only status\n    \n\n**Negative Scenarios:**\n\n1. update with non existent Id\n    \n2. update with invalid Pet Id"
				},
				{
					"name": "Delete a pet",
					"item": [
						{
							"name": "Positive Scenarios",
							"item": [
								{
									"name": "delete a valid Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pet is updated successfully\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message', '123'); // The pet ID",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b30371ff-408d-4a3f-82a2-b94083bce71b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "doggie",
													"type": "text"
												},
												{
													"key": "status",
													"value": "available",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/pet/123",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pet",
												"123"
											],
											"query": [
												{
													"key": "name",
													"value": "timtam",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "1a2e8a44-16be-42a9-95d4-c06b72de90ec"
						},
						{
							"name": "Negative Scenarios",
							"item": [
								{
									"name": "delete a non existent Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error message for pet not found\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message').that.includes('not found');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2de362b0-cdc0-4b5c-a9db-821f86c27040",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "{{baseUrl}}/pet/9223372016900017000"
									},
									"response": []
								},
								{
									"name": "delete a invalid pet id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ced270-8e62-4b96-b74c-f7226067c28d",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error message for invalid input\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('message').that.includes('invalid');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e2bf8478-27fd-410a-bc23-8f0315d9d587",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": "{{baseUrl}}/pet/invalid"
									},
									"response": []
								}
							],
							"id": "0e653e97-4902-4748-af93-b997ce48f2b3"
						}
					],
					"id": "fa196d45-c5e0-4562-a9b2-f36c356eeec4",
					"description": "This folder contains test scenarios for the endpoint - Find pet by Id\n\n**Positive Scenarios:**\n\n1. Delete a valid Id\n    \n\n**Negative Scenarios:**\n\n1. Delete a non existent Id\n    \n2. Delete an invalid Pet Id"
				}
			],
			"id": "99757401-b176-4252-9240-8730e8a25b09"
		}
	],
	"variable": [
		{
			"key": "Pet1Id",
			"value": ""
		},
		{
			"key": "Pet1Name",
			"value": ""
		},
		{
			"key": "Pet2Name",
			"value": ""
		},
		{
			"key": "Pet2Id",
			"value": ""
		},
		{
			"key": "Pet3Name",
			"value": ""
		},
		{
			"key": "Pet3Id",
			"value": ""
		},
		{
			"key": "Pet1Name-Modified",
			"value": ""
		}
	]
}